// Code generated by MockGen. DO NOT EDIT.
// Source: pb/raw_file_system_grpc.pb.go

// Package mock is a generated GoMock package.
package mock

import (
	context "context"
	reflect "reflect"

	pb "github.com/Mystarset/demo/pb"
	gomock "github.com/golang/mock/gomock"
	grpc "google.golang.org/grpc"
	metadata "google.golang.org/grpc/metadata"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// MockRawFileSystemClient is a mock of RawFileSystemClient interface.
type MockRawFileSystemClient struct {
	ctrl     *gomock.Controller
	recorder *MockRawFileSystemClientMockRecorder
}

// MockRawFileSystemClientMockRecorder is the mock recorder for MockRawFileSystemClient.
type MockRawFileSystemClientMockRecorder struct {
	mock *MockRawFileSystemClient
}

// NewMockRawFileSystemClient creates a new mock instance.
func NewMockRawFileSystemClient(ctrl *gomock.Controller) *MockRawFileSystemClient {
	mock := &MockRawFileSystemClient{ctrl: ctrl}
	mock.recorder = &MockRawFileSystemClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockRawFileSystemClient) EXPECT() *MockRawFileSystemClientMockRecorder {
	return m.recorder
}

// Access mocks base method.
func (m *MockRawFileSystemClient) Access(ctx context.Context, in *pb.AccessRequest, opts ...grpc.CallOption) (*pb.AccessResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Access", varargs...)
	ret0, _ := ret[0].(*pb.AccessResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Access indicates an expected call of Access.
func (mr *MockRawFileSystemClientMockRecorder) Access(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Access", reflect.TypeOf((*MockRawFileSystemClient)(nil).Access), varargs...)
}

// CopyFileRange mocks base method.
func (m *MockRawFileSystemClient) CopyFileRange(ctx context.Context, in *pb.CopyFileRangeRequest, opts ...grpc.CallOption) (*pb.CopyFileRangeResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CopyFileRange", varargs...)
	ret0, _ := ret[0].(*pb.CopyFileRangeResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CopyFileRange indicates an expected call of CopyFileRange.
func (mr *MockRawFileSystemClientMockRecorder) CopyFileRange(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CopyFileRange", reflect.TypeOf((*MockRawFileSystemClient)(nil).CopyFileRange), varargs...)
}

// Create mocks base method.
func (m *MockRawFileSystemClient) Create(ctx context.Context, in *pb.CreateRequest, opts ...grpc.CallOption) (*pb.CreateResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Create", varargs...)
	ret0, _ := ret[0].(*pb.CreateResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Create indicates an expected call of Create.
func (mr *MockRawFileSystemClientMockRecorder) Create(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockRawFileSystemClient)(nil).Create), varargs...)
}

// Fallocate mocks base method.
func (m *MockRawFileSystemClient) Fallocate(ctx context.Context, in *pb.FallocateRequest, opts ...grpc.CallOption) (*pb.FallocateResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Fallocate", varargs...)
	ret0, _ := ret[0].(*pb.FallocateResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Fallocate indicates an expected call of Fallocate.
func (mr *MockRawFileSystemClientMockRecorder) Fallocate(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Fallocate", reflect.TypeOf((*MockRawFileSystemClient)(nil).Fallocate), varargs...)
}

// Flush mocks base method.
func (m *MockRawFileSystemClient) Flush(ctx context.Context, in *pb.FlushRequest, opts ...grpc.CallOption) (*pb.FlushResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Flush", varargs...)
	ret0, _ := ret[0].(*pb.FlushResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Flush indicates an expected call of Flush.
func (mr *MockRawFileSystemClientMockRecorder) Flush(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Flush", reflect.TypeOf((*MockRawFileSystemClient)(nil).Flush), varargs...)
}

// Forget mocks base method.
func (m *MockRawFileSystemClient) Forget(ctx context.Context, in *pb.ForgetRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Forget", varargs...)
	ret0, _ := ret[0].(*emptypb.Empty)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Forget indicates an expected call of Forget.
func (mr *MockRawFileSystemClientMockRecorder) Forget(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Forget", reflect.TypeOf((*MockRawFileSystemClient)(nil).Forget), varargs...)
}

// Fsync mocks base method.
func (m *MockRawFileSystemClient) Fsync(ctx context.Context, in *pb.FsyncRequest, opts ...grpc.CallOption) (*pb.FsyncResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Fsync", varargs...)
	ret0, _ := ret[0].(*pb.FsyncResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Fsync indicates an expected call of Fsync.
func (mr *MockRawFileSystemClientMockRecorder) Fsync(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Fsync", reflect.TypeOf((*MockRawFileSystemClient)(nil).Fsync), varargs...)
}

// FsyncDir mocks base method.
func (m *MockRawFileSystemClient) FsyncDir(ctx context.Context, in *pb.FsyncRequest, opts ...grpc.CallOption) (*pb.FsyncResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "FsyncDir", varargs...)
	ret0, _ := ret[0].(*pb.FsyncResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FsyncDir indicates an expected call of FsyncDir.
func (mr *MockRawFileSystemClientMockRecorder) FsyncDir(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FsyncDir", reflect.TypeOf((*MockRawFileSystemClient)(nil).FsyncDir), varargs...)
}

// GetAttr mocks base method.
func (m *MockRawFileSystemClient) GetAttr(ctx context.Context, in *pb.GetAttrRequest, opts ...grpc.CallOption) (*pb.GetAttrResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetAttr", varargs...)
	ret0, _ := ret[0].(*pb.GetAttrResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAttr indicates an expected call of GetAttr.
func (mr *MockRawFileSystemClientMockRecorder) GetAttr(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAttr", reflect.TypeOf((*MockRawFileSystemClient)(nil).GetAttr), varargs...)
}

// GetLk mocks base method.
func (m *MockRawFileSystemClient) GetLk(ctx context.Context, in *pb.LkRequest, opts ...grpc.CallOption) (*pb.GetLkResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetLk", varargs...)
	ret0, _ := ret[0].(*pb.GetLkResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetLk indicates an expected call of GetLk.
func (mr *MockRawFileSystemClientMockRecorder) GetLk(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetLk", reflect.TypeOf((*MockRawFileSystemClient)(nil).GetLk), varargs...)
}

// GetXAttr mocks base method.
func (m *MockRawFileSystemClient) GetXAttr(ctx context.Context, in *pb.GetXAttrRequest, opts ...grpc.CallOption) (*pb.GetXAttrResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetXAttr", varargs...)
	ret0, _ := ret[0].(*pb.GetXAttrResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetXAttr indicates an expected call of GetXAttr.
func (mr *MockRawFileSystemClientMockRecorder) GetXAttr(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetXAttr", reflect.TypeOf((*MockRawFileSystemClient)(nil).GetXAttr), varargs...)
}

// Link mocks base method.
func (m *MockRawFileSystemClient) Link(ctx context.Context, in *pb.LinkRequest, opts ...grpc.CallOption) (*pb.LinkResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Link", varargs...)
	ret0, _ := ret[0].(*pb.LinkResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Link indicates an expected call of Link.
func (mr *MockRawFileSystemClientMockRecorder) Link(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Link", reflect.TypeOf((*MockRawFileSystemClient)(nil).Link), varargs...)
}

// ListXAttr mocks base method.
func (m *MockRawFileSystemClient) ListXAttr(ctx context.Context, in *pb.ListXAttrRequest, opts ...grpc.CallOption) (*pb.ListXAttrResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListXAttr", varargs...)
	ret0, _ := ret[0].(*pb.ListXAttrResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListXAttr indicates an expected call of ListXAttr.
func (mr *MockRawFileSystemClientMockRecorder) ListXAttr(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListXAttr", reflect.TypeOf((*MockRawFileSystemClient)(nil).ListXAttr), varargs...)
}

// Lookup mocks base method.
func (m *MockRawFileSystemClient) Lookup(ctx context.Context, in *pb.LookupRequest, opts ...grpc.CallOption) (*pb.LookupResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Lookup", varargs...)
	ret0, _ := ret[0].(*pb.LookupResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Lookup indicates an expected call of Lookup.
func (mr *MockRawFileSystemClientMockRecorder) Lookup(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Lookup", reflect.TypeOf((*MockRawFileSystemClient)(nil).Lookup), varargs...)
}

// Lseek mocks base method.
func (m *MockRawFileSystemClient) Lseek(ctx context.Context, in *pb.LseekRequest, opts ...grpc.CallOption) (*pb.LseekResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Lseek", varargs...)
	ret0, _ := ret[0].(*pb.LseekResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Lseek indicates an expected call of Lseek.
func (mr *MockRawFileSystemClientMockRecorder) Lseek(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Lseek", reflect.TypeOf((*MockRawFileSystemClient)(nil).Lseek), varargs...)
}

// Mkdir mocks base method.
func (m *MockRawFileSystemClient) Mkdir(ctx context.Context, in *pb.MkdirRequest, opts ...grpc.CallOption) (*pb.MkdirResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Mkdir", varargs...)
	ret0, _ := ret[0].(*pb.MkdirResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Mkdir indicates an expected call of Mkdir.
func (mr *MockRawFileSystemClientMockRecorder) Mkdir(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Mkdir", reflect.TypeOf((*MockRawFileSystemClient)(nil).Mkdir), varargs...)
}

// Mknod mocks base method.
func (m *MockRawFileSystemClient) Mknod(ctx context.Context, in *pb.MknodRequest, opts ...grpc.CallOption) (*pb.MknodResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Mknod", varargs...)
	ret0, _ := ret[0].(*pb.MknodResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Mknod indicates an expected call of Mknod.
func (mr *MockRawFileSystemClientMockRecorder) Mknod(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Mknod", reflect.TypeOf((*MockRawFileSystemClient)(nil).Mknod), varargs...)
}

// Open mocks base method.
func (m *MockRawFileSystemClient) Open(ctx context.Context, in *pb.OpenRequest, opts ...grpc.CallOption) (*pb.OpenResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Open", varargs...)
	ret0, _ := ret[0].(*pb.OpenResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Open indicates an expected call of Open.
func (mr *MockRawFileSystemClientMockRecorder) Open(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Open", reflect.TypeOf((*MockRawFileSystemClient)(nil).Open), varargs...)
}

// OpenDir mocks base method.
func (m *MockRawFileSystemClient) OpenDir(ctx context.Context, in *pb.OpenDirRequest, opts ...grpc.CallOption) (*pb.OpenDirResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "OpenDir", varargs...)
	ret0, _ := ret[0].(*pb.OpenDirResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// OpenDir indicates an expected call of OpenDir.
func (mr *MockRawFileSystemClientMockRecorder) OpenDir(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "OpenDir", reflect.TypeOf((*MockRawFileSystemClient)(nil).OpenDir), varargs...)
}

// Read mocks base method.
func (m *MockRawFileSystemClient) Read(ctx context.Context, in *pb.ReadRequest, opts ...grpc.CallOption) (pb.RawFileSystem_ReadClient, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Read", varargs...)
	ret0, _ := ret[0].(pb.RawFileSystem_ReadClient)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Read indicates an expected call of Read.
func (mr *MockRawFileSystemClientMockRecorder) Read(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Read", reflect.TypeOf((*MockRawFileSystemClient)(nil).Read), varargs...)
}

// ReadDir mocks base method.
func (m *MockRawFileSystemClient) ReadDir(ctx context.Context, in *pb.ReadDirRequest, opts ...grpc.CallOption) (pb.RawFileSystem_ReadDirClient, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ReadDir", varargs...)
	ret0, _ := ret[0].(pb.RawFileSystem_ReadDirClient)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ReadDir indicates an expected call of ReadDir.
func (mr *MockRawFileSystemClientMockRecorder) ReadDir(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReadDir", reflect.TypeOf((*MockRawFileSystemClient)(nil).ReadDir), varargs...)
}

// ReadDirPlus mocks base method.
func (m *MockRawFileSystemClient) ReadDirPlus(ctx context.Context, in *pb.ReadDirRequest, opts ...grpc.CallOption) (pb.RawFileSystem_ReadDirPlusClient, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ReadDirPlus", varargs...)
	ret0, _ := ret[0].(pb.RawFileSystem_ReadDirPlusClient)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ReadDirPlus indicates an expected call of ReadDirPlus.
func (mr *MockRawFileSystemClientMockRecorder) ReadDirPlus(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReadDirPlus", reflect.TypeOf((*MockRawFileSystemClient)(nil).ReadDirPlus), varargs...)
}

// Readlink mocks base method.
func (m *MockRawFileSystemClient) Readlink(ctx context.Context, in *pb.ReadlinkRequest, opts ...grpc.CallOption) (*pb.ReadlinkResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Readlink", varargs...)
	ret0, _ := ret[0].(*pb.ReadlinkResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Readlink indicates an expected call of Readlink.
func (mr *MockRawFileSystemClientMockRecorder) Readlink(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Readlink", reflect.TypeOf((*MockRawFileSystemClient)(nil).Readlink), varargs...)
}

// Release mocks base method.
func (m *MockRawFileSystemClient) Release(ctx context.Context, in *pb.ReleaseRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Release", varargs...)
	ret0, _ := ret[0].(*emptypb.Empty)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Release indicates an expected call of Release.
func (mr *MockRawFileSystemClientMockRecorder) Release(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Release", reflect.TypeOf((*MockRawFileSystemClient)(nil).Release), varargs...)
}

// ReleaseDir mocks base method.
func (m *MockRawFileSystemClient) ReleaseDir(ctx context.Context, in *pb.ReleaseRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ReleaseDir", varargs...)
	ret0, _ := ret[0].(*emptypb.Empty)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ReleaseDir indicates an expected call of ReleaseDir.
func (mr *MockRawFileSystemClientMockRecorder) ReleaseDir(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReleaseDir", reflect.TypeOf((*MockRawFileSystemClient)(nil).ReleaseDir), varargs...)
}

// RemoveXAttr mocks base method.
func (m *MockRawFileSystemClient) RemoveXAttr(ctx context.Context, in *pb.RemoveXAttrRequest, opts ...grpc.CallOption) (*pb.RemoveXAttrResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "RemoveXAttr", varargs...)
	ret0, _ := ret[0].(*pb.RemoveXAttrResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RemoveXAttr indicates an expected call of RemoveXAttr.
func (mr *MockRawFileSystemClientMockRecorder) RemoveXAttr(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RemoveXAttr", reflect.TypeOf((*MockRawFileSystemClient)(nil).RemoveXAttr), varargs...)
}

// Rename mocks base method.
func (m *MockRawFileSystemClient) Rename(ctx context.Context, in *pb.RenameRequest, opts ...grpc.CallOption) (*pb.RenameResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Rename", varargs...)
	ret0, _ := ret[0].(*pb.RenameResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Rename indicates an expected call of Rename.
func (mr *MockRawFileSystemClientMockRecorder) Rename(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Rename", reflect.TypeOf((*MockRawFileSystemClient)(nil).Rename), varargs...)
}

// Rmdir mocks base method.
func (m *MockRawFileSystemClient) Rmdir(ctx context.Context, in *pb.RmdirRequest, opts ...grpc.CallOption) (*pb.RmdirResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Rmdir", varargs...)
	ret0, _ := ret[0].(*pb.RmdirResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Rmdir indicates an expected call of Rmdir.
func (mr *MockRawFileSystemClientMockRecorder) Rmdir(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Rmdir", reflect.TypeOf((*MockRawFileSystemClient)(nil).Rmdir), varargs...)
}

// SetAttr mocks base method.
func (m *MockRawFileSystemClient) SetAttr(ctx context.Context, in *pb.SetAttrRequest, opts ...grpc.CallOption) (*pb.SetAttrResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "SetAttr", varargs...)
	ret0, _ := ret[0].(*pb.SetAttrResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SetAttr indicates an expected call of SetAttr.
func (mr *MockRawFileSystemClientMockRecorder) SetAttr(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetAttr", reflect.TypeOf((*MockRawFileSystemClient)(nil).SetAttr), varargs...)
}

// SetLk mocks base method.
func (m *MockRawFileSystemClient) SetLk(ctx context.Context, in *pb.LkRequest, opts ...grpc.CallOption) (*pb.SetLkResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "SetLk", varargs...)
	ret0, _ := ret[0].(*pb.SetLkResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SetLk indicates an expected call of SetLk.
func (mr *MockRawFileSystemClientMockRecorder) SetLk(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetLk", reflect.TypeOf((*MockRawFileSystemClient)(nil).SetLk), varargs...)
}

// SetLkw mocks base method.
func (m *MockRawFileSystemClient) SetLkw(ctx context.Context, in *pb.LkRequest, opts ...grpc.CallOption) (*pb.SetLkResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "SetLkw", varargs...)
	ret0, _ := ret[0].(*pb.SetLkResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SetLkw indicates an expected call of SetLkw.
func (mr *MockRawFileSystemClientMockRecorder) SetLkw(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetLkw", reflect.TypeOf((*MockRawFileSystemClient)(nil).SetLkw), varargs...)
}

// SetXAttr mocks base method.
func (m *MockRawFileSystemClient) SetXAttr(ctx context.Context, in *pb.SetXAttrRequest, opts ...grpc.CallOption) (*pb.SetXAttrResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "SetXAttr", varargs...)
	ret0, _ := ret[0].(*pb.SetXAttrResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SetXAttr indicates an expected call of SetXAttr.
func (mr *MockRawFileSystemClientMockRecorder) SetXAttr(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetXAttr", reflect.TypeOf((*MockRawFileSystemClient)(nil).SetXAttr), varargs...)
}

// StatFs mocks base method.
func (m *MockRawFileSystemClient) StatFs(ctx context.Context, in *pb.StatfsRequest, opts ...grpc.CallOption) (*pb.StatfsResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "StatFs", varargs...)
	ret0, _ := ret[0].(*pb.StatfsResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// StatFs indicates an expected call of StatFs.
func (mr *MockRawFileSystemClientMockRecorder) StatFs(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StatFs", reflect.TypeOf((*MockRawFileSystemClient)(nil).StatFs), varargs...)
}

// String mocks base method.
func (m *MockRawFileSystemClient) String(ctx context.Context, in *pb.StringRequest, opts ...grpc.CallOption) (*pb.StringResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "String", varargs...)
	ret0, _ := ret[0].(*pb.StringResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// String indicates an expected call of String.
func (mr *MockRawFileSystemClientMockRecorder) String(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "String", reflect.TypeOf((*MockRawFileSystemClient)(nil).String), varargs...)
}

// Symlink mocks base method.
func (m *MockRawFileSystemClient) Symlink(ctx context.Context, in *pb.SymlinkRequest, opts ...grpc.CallOption) (*pb.SymlinkResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Symlink", varargs...)
	ret0, _ := ret[0].(*pb.SymlinkResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Symlink indicates an expected call of Symlink.
func (mr *MockRawFileSystemClientMockRecorder) Symlink(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Symlink", reflect.TypeOf((*MockRawFileSystemClient)(nil).Symlink), varargs...)
}

// Unlink mocks base method.
func (m *MockRawFileSystemClient) Unlink(ctx context.Context, in *pb.UnlinkRequest, opts ...grpc.CallOption) (*pb.UnlinkResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Unlink", varargs...)
	ret0, _ := ret[0].(*pb.UnlinkResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Unlink indicates an expected call of Unlink.
func (mr *MockRawFileSystemClientMockRecorder) Unlink(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Unlink", reflect.TypeOf((*MockRawFileSystemClient)(nil).Unlink), varargs...)
}

// Write mocks base method.
func (m *MockRawFileSystemClient) Write(ctx context.Context, in *pb.WriteRequest, opts ...grpc.CallOption) (*pb.WriteResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Write", varargs...)
	ret0, _ := ret[0].(*pb.WriteResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Write indicates an expected call of Write.
func (mr *MockRawFileSystemClientMockRecorder) Write(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Write", reflect.TypeOf((*MockRawFileSystemClient)(nil).Write), varargs...)
}

// MockRawFileSystem_ReadClient is a mock of RawFileSystem_ReadClient interface.
type MockRawFileSystem_ReadClient struct {
	ctrl     *gomock.Controller
	recorder *MockRawFileSystem_ReadClientMockRecorder
}

// MockRawFileSystem_ReadClientMockRecorder is the mock recorder for MockRawFileSystem_ReadClient.
type MockRawFileSystem_ReadClientMockRecorder struct {
	mock *MockRawFileSystem_ReadClient
}

// NewMockRawFileSystem_ReadClient creates a new mock instance.
func NewMockRawFileSystem_ReadClient(ctrl *gomock.Controller) *MockRawFileSystem_ReadClient {
	mock := &MockRawFileSystem_ReadClient{ctrl: ctrl}
	mock.recorder = &MockRawFileSystem_ReadClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockRawFileSystem_ReadClient) EXPECT() *MockRawFileSystem_ReadClientMockRecorder {
	return m.recorder
}

// CloseSend mocks base method.
func (m *MockRawFileSystem_ReadClient) CloseSend() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CloseSend")
	ret0, _ := ret[0].(error)
	return ret0
}

// CloseSend indicates an expected call of CloseSend.
func (mr *MockRawFileSystem_ReadClientMockRecorder) CloseSend() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CloseSend", reflect.TypeOf((*MockRawFileSystem_ReadClient)(nil).CloseSend))
}

// Context mocks base method.
func (m *MockRawFileSystem_ReadClient) Context() context.Context {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Context")
	ret0, _ := ret[0].(context.Context)
	return ret0
}

// Context indicates an expected call of Context.
func (mr *MockRawFileSystem_ReadClientMockRecorder) Context() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Context", reflect.TypeOf((*MockRawFileSystem_ReadClient)(nil).Context))
}

// Header mocks base method.
func (m *MockRawFileSystem_ReadClient) Header() (metadata.MD, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Header")
	ret0, _ := ret[0].(metadata.MD)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Header indicates an expected call of Header.
func (mr *MockRawFileSystem_ReadClientMockRecorder) Header() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Header", reflect.TypeOf((*MockRawFileSystem_ReadClient)(nil).Header))
}

// Recv mocks base method.
func (m *MockRawFileSystem_ReadClient) Recv() (*pb.ReadResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Recv")
	ret0, _ := ret[0].(*pb.ReadResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Recv indicates an expected call of Recv.
func (mr *MockRawFileSystem_ReadClientMockRecorder) Recv() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Recv", reflect.TypeOf((*MockRawFileSystem_ReadClient)(nil).Recv))
}

// RecvMsg mocks base method.
func (m_2 *MockRawFileSystem_ReadClient) RecvMsg(m interface{}) error {
	m_2.ctrl.T.Helper()
	ret := m_2.ctrl.Call(m_2, "RecvMsg", m)
	ret0, _ := ret[0].(error)
	return ret0
}

// RecvMsg indicates an expected call of RecvMsg.
func (mr *MockRawFileSystem_ReadClientMockRecorder) RecvMsg(m interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RecvMsg", reflect.TypeOf((*MockRawFileSystem_ReadClient)(nil).RecvMsg), m)
}

// SendMsg mocks base method.
func (m_2 *MockRawFileSystem_ReadClient) SendMsg(m interface{}) error {
	m_2.ctrl.T.Helper()
	ret := m_2.ctrl.Call(m_2, "SendMsg", m)
	ret0, _ := ret[0].(error)
	return ret0
}

// SendMsg indicates an expected call of SendMsg.
func (mr *MockRawFileSystem_ReadClientMockRecorder) SendMsg(m interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendMsg", reflect.TypeOf((*MockRawFileSystem_ReadClient)(nil).SendMsg), m)
}

// Trailer mocks base method.
func (m *MockRawFileSystem_ReadClient) Trailer() metadata.MD {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Trailer")
	ret0, _ := ret[0].(metadata.MD)
	return ret0
}

// Trailer indicates an expected call of Trailer.
func (mr *MockRawFileSystem_ReadClientMockRecorder) Trailer() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Trailer", reflect.TypeOf((*MockRawFileSystem_ReadClient)(nil).Trailer))
}

// MockRawFileSystem_ReadDirClient is a mock of RawFileSystem_ReadDirClient interface.
type MockRawFileSystem_ReadDirClient struct {
	ctrl     *gomock.Controller
	recorder *MockRawFileSystem_ReadDirClientMockRecorder
}

// MockRawFileSystem_ReadDirClientMockRecorder is the mock recorder for MockRawFileSystem_ReadDirClient.
type MockRawFileSystem_ReadDirClientMockRecorder struct {
	mock *MockRawFileSystem_ReadDirClient
}

// NewMockRawFileSystem_ReadDirClient creates a new mock instance.
func NewMockRawFileSystem_ReadDirClient(ctrl *gomock.Controller) *MockRawFileSystem_ReadDirClient {
	mock := &MockRawFileSystem_ReadDirClient{ctrl: ctrl}
	mock.recorder = &MockRawFileSystem_ReadDirClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockRawFileSystem_ReadDirClient) EXPECT() *MockRawFileSystem_ReadDirClientMockRecorder {
	return m.recorder
}

// CloseSend mocks base method.
func (m *MockRawFileSystem_ReadDirClient) CloseSend() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CloseSend")
	ret0, _ := ret[0].(error)
	return ret0
}

// CloseSend indicates an expected call of CloseSend.
func (mr *MockRawFileSystem_ReadDirClientMockRecorder) CloseSend() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CloseSend", reflect.TypeOf((*MockRawFileSystem_ReadDirClient)(nil).CloseSend))
}

// Context mocks base method.
func (m *MockRawFileSystem_ReadDirClient) Context() context.Context {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Context")
	ret0, _ := ret[0].(context.Context)
	return ret0
}

// Context indicates an expected call of Context.
func (mr *MockRawFileSystem_ReadDirClientMockRecorder) Context() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Context", reflect.TypeOf((*MockRawFileSystem_ReadDirClient)(nil).Context))
}

// Header mocks base method.
func (m *MockRawFileSystem_ReadDirClient) Header() (metadata.MD, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Header")
	ret0, _ := ret[0].(metadata.MD)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Header indicates an expected call of Header.
func (mr *MockRawFileSystem_ReadDirClientMockRecorder) Header() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Header", reflect.TypeOf((*MockRawFileSystem_ReadDirClient)(nil).Header))
}

// Recv mocks base method.
func (m *MockRawFileSystem_ReadDirClient) Recv() (*pb.ReadDirResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Recv")
	ret0, _ := ret[0].(*pb.ReadDirResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Recv indicates an expected call of Recv.
func (mr *MockRawFileSystem_ReadDirClientMockRecorder) Recv() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Recv", reflect.TypeOf((*MockRawFileSystem_ReadDirClient)(nil).Recv))
}

// RecvMsg mocks base method.
func (m_2 *MockRawFileSystem_ReadDirClient) RecvMsg(m interface{}) error {
	m_2.ctrl.T.Helper()
	ret := m_2.ctrl.Call(m_2, "RecvMsg", m)
	ret0, _ := ret[0].(error)
	return ret0
}

// RecvMsg indicates an expected call of RecvMsg.
func (mr *MockRawFileSystem_ReadDirClientMockRecorder) RecvMsg(m interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RecvMsg", reflect.TypeOf((*MockRawFileSystem_ReadDirClient)(nil).RecvMsg), m)
}

// SendMsg mocks base method.
func (m_2 *MockRawFileSystem_ReadDirClient) SendMsg(m interface{}) error {
	m_2.ctrl.T.Helper()
	ret := m_2.ctrl.Call(m_2, "SendMsg", m)
	ret0, _ := ret[0].(error)
	return ret0
}

// SendMsg indicates an expected call of SendMsg.
func (mr *MockRawFileSystem_ReadDirClientMockRecorder) SendMsg(m interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendMsg", reflect.TypeOf((*MockRawFileSystem_ReadDirClient)(nil).SendMsg), m)
}

// Trailer mocks base method.
func (m *MockRawFileSystem_ReadDirClient) Trailer() metadata.MD {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Trailer")
	ret0, _ := ret[0].(metadata.MD)
	return ret0
}

// Trailer indicates an expected call of Trailer.
func (mr *MockRawFileSystem_ReadDirClientMockRecorder) Trailer() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Trailer", reflect.TypeOf((*MockRawFileSystem_ReadDirClient)(nil).Trailer))
}

// MockRawFileSystem_ReadDirPlusClient is a mock of RawFileSystem_ReadDirPlusClient interface.
type MockRawFileSystem_ReadDirPlusClient struct {
	ctrl     *gomock.Controller
	recorder *MockRawFileSystem_ReadDirPlusClientMockRecorder
}

// MockRawFileSystem_ReadDirPlusClientMockRecorder is the mock recorder for MockRawFileSystem_ReadDirPlusClient.
type MockRawFileSystem_ReadDirPlusClientMockRecorder struct {
	mock *MockRawFileSystem_ReadDirPlusClient
}

// NewMockRawFileSystem_ReadDirPlusClient creates a new mock instance.
func NewMockRawFileSystem_ReadDirPlusClient(ctrl *gomock.Controller) *MockRawFileSystem_ReadDirPlusClient {
	mock := &MockRawFileSystem_ReadDirPlusClient{ctrl: ctrl}
	mock.recorder = &MockRawFileSystem_ReadDirPlusClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockRawFileSystem_ReadDirPlusClient) EXPECT() *MockRawFileSystem_ReadDirPlusClientMockRecorder {
	return m.recorder
}

// CloseSend mocks base method.
func (m *MockRawFileSystem_ReadDirPlusClient) CloseSend() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CloseSend")
	ret0, _ := ret[0].(error)
	return ret0
}

// CloseSend indicates an expected call of CloseSend.
func (mr *MockRawFileSystem_ReadDirPlusClientMockRecorder) CloseSend() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CloseSend", reflect.TypeOf((*MockRawFileSystem_ReadDirPlusClient)(nil).CloseSend))
}

// Context mocks base method.
func (m *MockRawFileSystem_ReadDirPlusClient) Context() context.Context {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Context")
	ret0, _ := ret[0].(context.Context)
	return ret0
}

// Context indicates an expected call of Context.
func (mr *MockRawFileSystem_ReadDirPlusClientMockRecorder) Context() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Context", reflect.TypeOf((*MockRawFileSystem_ReadDirPlusClient)(nil).Context))
}

// Header mocks base method.
func (m *MockRawFileSystem_ReadDirPlusClient) Header() (metadata.MD, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Header")
	ret0, _ := ret[0].(metadata.MD)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Header indicates an expected call of Header.
func (mr *MockRawFileSystem_ReadDirPlusClientMockRecorder) Header() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Header", reflect.TypeOf((*MockRawFileSystem_ReadDirPlusClient)(nil).Header))
}

// Recv mocks base method.
func (m *MockRawFileSystem_ReadDirPlusClient) Recv() (*pb.ReadDirResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Recv")
	ret0, _ := ret[0].(*pb.ReadDirResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Recv indicates an expected call of Recv.
func (mr *MockRawFileSystem_ReadDirPlusClientMockRecorder) Recv() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Recv", reflect.TypeOf((*MockRawFileSystem_ReadDirPlusClient)(nil).Recv))
}

// RecvMsg mocks base method.
func (m_2 *MockRawFileSystem_ReadDirPlusClient) RecvMsg(m interface{}) error {
	m_2.ctrl.T.Helper()
	ret := m_2.ctrl.Call(m_2, "RecvMsg", m)
	ret0, _ := ret[0].(error)
	return ret0
}

// RecvMsg indicates an expected call of RecvMsg.
func (mr *MockRawFileSystem_ReadDirPlusClientMockRecorder) RecvMsg(m interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RecvMsg", reflect.TypeOf((*MockRawFileSystem_ReadDirPlusClient)(nil).RecvMsg), m)
}

// SendMsg mocks base method.
func (m_2 *MockRawFileSystem_ReadDirPlusClient) SendMsg(m interface{}) error {
	m_2.ctrl.T.Helper()
	ret := m_2.ctrl.Call(m_2, "SendMsg", m)
	ret0, _ := ret[0].(error)
	return ret0
}

// SendMsg indicates an expected call of SendMsg.
func (mr *MockRawFileSystem_ReadDirPlusClientMockRecorder) SendMsg(m interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendMsg", reflect.TypeOf((*MockRawFileSystem_ReadDirPlusClient)(nil).SendMsg), m)
}

// Trailer mocks base method.
func (m *MockRawFileSystem_ReadDirPlusClient) Trailer() metadata.MD {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Trailer")
	ret0, _ := ret[0].(metadata.MD)
	return ret0
}

// Trailer indicates an expected call of Trailer.
func (mr *MockRawFileSystem_ReadDirPlusClientMockRecorder) Trailer() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Trailer", reflect.TypeOf((*MockRawFileSystem_ReadDirPlusClient)(nil).Trailer))
}

// MockRawFileSystemServer is a mock of RawFileSystemServer interface.
type MockRawFileSystemServer struct {
	ctrl     *gomock.Controller
	recorder *MockRawFileSystemServerMockRecorder
}

// MockRawFileSystemServerMockRecorder is the mock recorder for MockRawFileSystemServer.
type MockRawFileSystemServerMockRecorder struct {
	mock *MockRawFileSystemServer
}

// NewMockRawFileSystemServer creates a new mock instance.
func NewMockRawFileSystemServer(ctrl *gomock.Controller) *MockRawFileSystemServer {
	mock := &MockRawFileSystemServer{ctrl: ctrl}
	mock.recorder = &MockRawFileSystemServerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockRawFileSystemServer) EXPECT() *MockRawFileSystemServerMockRecorder {
	return m.recorder
}

// Access mocks base method.
func (m *MockRawFileSystemServer) Access(arg0 context.Context, arg1 *pb.AccessRequest) (*pb.AccessResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Access", arg0, arg1)
	ret0, _ := ret[0].(*pb.AccessResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Access indicates an expected call of Access.
func (mr *MockRawFileSystemServerMockRecorder) Access(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Access", reflect.TypeOf((*MockRawFileSystemServer)(nil).Access), arg0, arg1)
}

// CopyFileRange mocks base method.
func (m *MockRawFileSystemServer) CopyFileRange(arg0 context.Context, arg1 *pb.CopyFileRangeRequest) (*pb.CopyFileRangeResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CopyFileRange", arg0, arg1)
	ret0, _ := ret[0].(*pb.CopyFileRangeResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CopyFileRange indicates an expected call of CopyFileRange.
func (mr *MockRawFileSystemServerMockRecorder) CopyFileRange(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CopyFileRange", reflect.TypeOf((*MockRawFileSystemServer)(nil).CopyFileRange), arg0, arg1)
}

// Create mocks base method.
func (m *MockRawFileSystemServer) Create(arg0 context.Context, arg1 *pb.CreateRequest) (*pb.CreateResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", arg0, arg1)
	ret0, _ := ret[0].(*pb.CreateResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Create indicates an expected call of Create.
func (mr *MockRawFileSystemServerMockRecorder) Create(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockRawFileSystemServer)(nil).Create), arg0, arg1)
}

// Fallocate mocks base method.
func (m *MockRawFileSystemServer) Fallocate(arg0 context.Context, arg1 *pb.FallocateRequest) (*pb.FallocateResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Fallocate", arg0, arg1)
	ret0, _ := ret[0].(*pb.FallocateResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Fallocate indicates an expected call of Fallocate.
func (mr *MockRawFileSystemServerMockRecorder) Fallocate(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Fallocate", reflect.TypeOf((*MockRawFileSystemServer)(nil).Fallocate), arg0, arg1)
}

// Flush mocks base method.
func (m *MockRawFileSystemServer) Flush(arg0 context.Context, arg1 *pb.FlushRequest) (*pb.FlushResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Flush", arg0, arg1)
	ret0, _ := ret[0].(*pb.FlushResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Flush indicates an expected call of Flush.
func (mr *MockRawFileSystemServerMockRecorder) Flush(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Flush", reflect.TypeOf((*MockRawFileSystemServer)(nil).Flush), arg0, arg1)
}

// Forget mocks base method.
func (m *MockRawFileSystemServer) Forget(arg0 context.Context, arg1 *pb.ForgetRequest) (*emptypb.Empty, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Forget", arg0, arg1)
	ret0, _ := ret[0].(*emptypb.Empty)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Forget indicates an expected call of Forget.
func (mr *MockRawFileSystemServerMockRecorder) Forget(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Forget", reflect.TypeOf((*MockRawFileSystemServer)(nil).Forget), arg0, arg1)
}

// Fsync mocks base method.
func (m *MockRawFileSystemServer) Fsync(arg0 context.Context, arg1 *pb.FsyncRequest) (*pb.FsyncResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Fsync", arg0, arg1)
	ret0, _ := ret[0].(*pb.FsyncResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Fsync indicates an expected call of Fsync.
func (mr *MockRawFileSystemServerMockRecorder) Fsync(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Fsync", reflect.TypeOf((*MockRawFileSystemServer)(nil).Fsync), arg0, arg1)
}

// FsyncDir mocks base method.
func (m *MockRawFileSystemServer) FsyncDir(arg0 context.Context, arg1 *pb.FsyncRequest) (*pb.FsyncResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FsyncDir", arg0, arg1)
	ret0, _ := ret[0].(*pb.FsyncResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FsyncDir indicates an expected call of FsyncDir.
func (mr *MockRawFileSystemServerMockRecorder) FsyncDir(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FsyncDir", reflect.TypeOf((*MockRawFileSystemServer)(nil).FsyncDir), arg0, arg1)
}

// GetAttr mocks base method.
func (m *MockRawFileSystemServer) GetAttr(arg0 context.Context, arg1 *pb.GetAttrRequest) (*pb.GetAttrResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAttr", arg0, arg1)
	ret0, _ := ret[0].(*pb.GetAttrResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAttr indicates an expected call of GetAttr.
func (mr *MockRawFileSystemServerMockRecorder) GetAttr(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAttr", reflect.TypeOf((*MockRawFileSystemServer)(nil).GetAttr), arg0, arg1)
}

// GetLk mocks base method.
func (m *MockRawFileSystemServer) GetLk(arg0 context.Context, arg1 *pb.LkRequest) (*pb.GetLkResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetLk", arg0, arg1)
	ret0, _ := ret[0].(*pb.GetLkResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetLk indicates an expected call of GetLk.
func (mr *MockRawFileSystemServerMockRecorder) GetLk(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetLk", reflect.TypeOf((*MockRawFileSystemServer)(nil).GetLk), arg0, arg1)
}

// GetXAttr mocks base method.
func (m *MockRawFileSystemServer) GetXAttr(arg0 context.Context, arg1 *pb.GetXAttrRequest) (*pb.GetXAttrResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetXAttr", arg0, arg1)
	ret0, _ := ret[0].(*pb.GetXAttrResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetXAttr indicates an expected call of GetXAttr.
func (mr *MockRawFileSystemServerMockRecorder) GetXAttr(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetXAttr", reflect.TypeOf((*MockRawFileSystemServer)(nil).GetXAttr), arg0, arg1)
}

// Link mocks base method.
func (m *MockRawFileSystemServer) Link(arg0 context.Context, arg1 *pb.LinkRequest) (*pb.LinkResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Link", arg0, arg1)
	ret0, _ := ret[0].(*pb.LinkResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Link indicates an expected call of Link.
func (mr *MockRawFileSystemServerMockRecorder) Link(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Link", reflect.TypeOf((*MockRawFileSystemServer)(nil).Link), arg0, arg1)
}

// ListXAttr mocks base method.
func (m *MockRawFileSystemServer) ListXAttr(arg0 context.Context, arg1 *pb.ListXAttrRequest) (*pb.ListXAttrResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListXAttr", arg0, arg1)
	ret0, _ := ret[0].(*pb.ListXAttrResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListXAttr indicates an expected call of ListXAttr.
func (mr *MockRawFileSystemServerMockRecorder) ListXAttr(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListXAttr", reflect.TypeOf((*MockRawFileSystemServer)(nil).ListXAttr), arg0, arg1)
}

// Lookup mocks base method.
func (m *MockRawFileSystemServer) Lookup(arg0 context.Context, arg1 *pb.LookupRequest) (*pb.LookupResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Lookup", arg0, arg1)
	ret0, _ := ret[0].(*pb.LookupResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Lookup indicates an expected call of Lookup.
func (mr *MockRawFileSystemServerMockRecorder) Lookup(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Lookup", reflect.TypeOf((*MockRawFileSystemServer)(nil).Lookup), arg0, arg1)
}

// Lseek mocks base method.
func (m *MockRawFileSystemServer) Lseek(arg0 context.Context, arg1 *pb.LseekRequest) (*pb.LseekResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Lseek", arg0, arg1)
	ret0, _ := ret[0].(*pb.LseekResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Lseek indicates an expected call of Lseek.
func (mr *MockRawFileSystemServerMockRecorder) Lseek(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Lseek", reflect.TypeOf((*MockRawFileSystemServer)(nil).Lseek), arg0, arg1)
}

// Mkdir mocks base method.
func (m *MockRawFileSystemServer) Mkdir(arg0 context.Context, arg1 *pb.MkdirRequest) (*pb.MkdirResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Mkdir", arg0, arg1)
	ret0, _ := ret[0].(*pb.MkdirResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Mkdir indicates an expected call of Mkdir.
func (mr *MockRawFileSystemServerMockRecorder) Mkdir(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Mkdir", reflect.TypeOf((*MockRawFileSystemServer)(nil).Mkdir), arg0, arg1)
}

// Mknod mocks base method.
func (m *MockRawFileSystemServer) Mknod(arg0 context.Context, arg1 *pb.MknodRequest) (*pb.MknodResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Mknod", arg0, arg1)
	ret0, _ := ret[0].(*pb.MknodResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Mknod indicates an expected call of Mknod.
func (mr *MockRawFileSystemServerMockRecorder) Mknod(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Mknod", reflect.TypeOf((*MockRawFileSystemServer)(nil).Mknod), arg0, arg1)
}

// Open mocks base method.
func (m *MockRawFileSystemServer) Open(arg0 context.Context, arg1 *pb.OpenRequest) (*pb.OpenResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Open", arg0, arg1)
	ret0, _ := ret[0].(*pb.OpenResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Open indicates an expected call of Open.
func (mr *MockRawFileSystemServerMockRecorder) Open(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Open", reflect.TypeOf((*MockRawFileSystemServer)(nil).Open), arg0, arg1)
}

// OpenDir mocks base method.
func (m *MockRawFileSystemServer) OpenDir(arg0 context.Context, arg1 *pb.OpenDirRequest) (*pb.OpenDirResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "OpenDir", arg0, arg1)
	ret0, _ := ret[0].(*pb.OpenDirResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// OpenDir indicates an expected call of OpenDir.
func (mr *MockRawFileSystemServerMockRecorder) OpenDir(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "OpenDir", reflect.TypeOf((*MockRawFileSystemServer)(nil).OpenDir), arg0, arg1)
}

// Read mocks base method.
func (m *MockRawFileSystemServer) Read(arg0 *pb.ReadRequest, arg1 pb.RawFileSystem_ReadServer) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Read", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// Read indicates an expected call of Read.
func (mr *MockRawFileSystemServerMockRecorder) Read(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Read", reflect.TypeOf((*MockRawFileSystemServer)(nil).Read), arg0, arg1)
}

// ReadDir mocks base method.
func (m *MockRawFileSystemServer) ReadDir(arg0 *pb.ReadDirRequest, arg1 pb.RawFileSystem_ReadDirServer) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ReadDir", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// ReadDir indicates an expected call of ReadDir.
func (mr *MockRawFileSystemServerMockRecorder) ReadDir(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReadDir", reflect.TypeOf((*MockRawFileSystemServer)(nil).ReadDir), arg0, arg1)
}

// ReadDirPlus mocks base method.
func (m *MockRawFileSystemServer) ReadDirPlus(arg0 *pb.ReadDirRequest, arg1 pb.RawFileSystem_ReadDirPlusServer) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ReadDirPlus", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// ReadDirPlus indicates an expected call of ReadDirPlus.
func (mr *MockRawFileSystemServerMockRecorder) ReadDirPlus(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReadDirPlus", reflect.TypeOf((*MockRawFileSystemServer)(nil).ReadDirPlus), arg0, arg1)
}

// Readlink mocks base method.
func (m *MockRawFileSystemServer) Readlink(arg0 context.Context, arg1 *pb.ReadlinkRequest) (*pb.ReadlinkResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Readlink", arg0, arg1)
	ret0, _ := ret[0].(*pb.ReadlinkResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Readlink indicates an expected call of Readlink.
func (mr *MockRawFileSystemServerMockRecorder) Readlink(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Readlink", reflect.TypeOf((*MockRawFileSystemServer)(nil).Readlink), arg0, arg1)
}

// Release mocks base method.
func (m *MockRawFileSystemServer) Release(arg0 context.Context, arg1 *pb.ReleaseRequest) (*emptypb.Empty, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Release", arg0, arg1)
	ret0, _ := ret[0].(*emptypb.Empty)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Release indicates an expected call of Release.
func (mr *MockRawFileSystemServerMockRecorder) Release(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Release", reflect.TypeOf((*MockRawFileSystemServer)(nil).Release), arg0, arg1)
}

// ReleaseDir mocks base method.
func (m *MockRawFileSystemServer) ReleaseDir(arg0 context.Context, arg1 *pb.ReleaseRequest) (*emptypb.Empty, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ReleaseDir", arg0, arg1)
	ret0, _ := ret[0].(*emptypb.Empty)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ReleaseDir indicates an expected call of ReleaseDir.
func (mr *MockRawFileSystemServerMockRecorder) ReleaseDir(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReleaseDir", reflect.TypeOf((*MockRawFileSystemServer)(nil).ReleaseDir), arg0, arg1)
}

// RemoveXAttr mocks base method.
func (m *MockRawFileSystemServer) RemoveXAttr(arg0 context.Context, arg1 *pb.RemoveXAttrRequest) (*pb.RemoveXAttrResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RemoveXAttr", arg0, arg1)
	ret0, _ := ret[0].(*pb.RemoveXAttrResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RemoveXAttr indicates an expected call of RemoveXAttr.
func (mr *MockRawFileSystemServerMockRecorder) RemoveXAttr(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RemoveXAttr", reflect.TypeOf((*MockRawFileSystemServer)(nil).RemoveXAttr), arg0, arg1)
}

// Rename mocks base method.
func (m *MockRawFileSystemServer) Rename(arg0 context.Context, arg1 *pb.RenameRequest) (*pb.RenameResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Rename", arg0, arg1)
	ret0, _ := ret[0].(*pb.RenameResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Rename indicates an expected call of Rename.
func (mr *MockRawFileSystemServerMockRecorder) Rename(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Rename", reflect.TypeOf((*MockRawFileSystemServer)(nil).Rename), arg0, arg1)
}

// Rmdir mocks base method.
func (m *MockRawFileSystemServer) Rmdir(arg0 context.Context, arg1 *pb.RmdirRequest) (*pb.RmdirResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Rmdir", arg0, arg1)
	ret0, _ := ret[0].(*pb.RmdirResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Rmdir indicates an expected call of Rmdir.
func (mr *MockRawFileSystemServerMockRecorder) Rmdir(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Rmdir", reflect.TypeOf((*MockRawFileSystemServer)(nil).Rmdir), arg0, arg1)
}

// SetAttr mocks base method.
func (m *MockRawFileSystemServer) SetAttr(arg0 context.Context, arg1 *pb.SetAttrRequest) (*pb.SetAttrResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetAttr", arg0, arg1)
	ret0, _ := ret[0].(*pb.SetAttrResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SetAttr indicates an expected call of SetAttr.
func (mr *MockRawFileSystemServerMockRecorder) SetAttr(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetAttr", reflect.TypeOf((*MockRawFileSystemServer)(nil).SetAttr), arg0, arg1)
}

// SetLk mocks base method.
func (m *MockRawFileSystemServer) SetLk(arg0 context.Context, arg1 *pb.LkRequest) (*pb.SetLkResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetLk", arg0, arg1)
	ret0, _ := ret[0].(*pb.SetLkResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SetLk indicates an expected call of SetLk.
func (mr *MockRawFileSystemServerMockRecorder) SetLk(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetLk", reflect.TypeOf((*MockRawFileSystemServer)(nil).SetLk), arg0, arg1)
}

// SetLkw mocks base method.
func (m *MockRawFileSystemServer) SetLkw(arg0 context.Context, arg1 *pb.LkRequest) (*pb.SetLkResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetLkw", arg0, arg1)
	ret0, _ := ret[0].(*pb.SetLkResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SetLkw indicates an expected call of SetLkw.
func (mr *MockRawFileSystemServerMockRecorder) SetLkw(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetLkw", reflect.TypeOf((*MockRawFileSystemServer)(nil).SetLkw), arg0, arg1)
}

// SetXAttr mocks base method.
func (m *MockRawFileSystemServer) SetXAttr(arg0 context.Context, arg1 *pb.SetXAttrRequest) (*pb.SetXAttrResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetXAttr", arg0, arg1)
	ret0, _ := ret[0].(*pb.SetXAttrResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SetXAttr indicates an expected call of SetXAttr.
func (mr *MockRawFileSystemServerMockRecorder) SetXAttr(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetXAttr", reflect.TypeOf((*MockRawFileSystemServer)(nil).SetXAttr), arg0, arg1)
}

// StatFs mocks base method.
func (m *MockRawFileSystemServer) StatFs(arg0 context.Context, arg1 *pb.StatfsRequest) (*pb.StatfsResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "StatFs", arg0, arg1)
	ret0, _ := ret[0].(*pb.StatfsResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// StatFs indicates an expected call of StatFs.
func (mr *MockRawFileSystemServerMockRecorder) StatFs(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StatFs", reflect.TypeOf((*MockRawFileSystemServer)(nil).StatFs), arg0, arg1)
}

// String mocks base method.
func (m *MockRawFileSystemServer) String(arg0 context.Context, arg1 *pb.StringRequest) (*pb.StringResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "String", arg0, arg1)
	ret0, _ := ret[0].(*pb.StringResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// String indicates an expected call of String.
func (mr *MockRawFileSystemServerMockRecorder) String(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "String", reflect.TypeOf((*MockRawFileSystemServer)(nil).String), arg0, arg1)
}

// Symlink mocks base method.
func (m *MockRawFileSystemServer) Symlink(arg0 context.Context, arg1 *pb.SymlinkRequest) (*pb.SymlinkResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Symlink", arg0, arg1)
	ret0, _ := ret[0].(*pb.SymlinkResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Symlink indicates an expected call of Symlink.
func (mr *MockRawFileSystemServerMockRecorder) Symlink(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Symlink", reflect.TypeOf((*MockRawFileSystemServer)(nil).Symlink), arg0, arg1)
}

// Unlink mocks base method.
func (m *MockRawFileSystemServer) Unlink(arg0 context.Context, arg1 *pb.UnlinkRequest) (*pb.UnlinkResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Unlink", arg0, arg1)
	ret0, _ := ret[0].(*pb.UnlinkResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Unlink indicates an expected call of Unlink.
func (mr *MockRawFileSystemServerMockRecorder) Unlink(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Unlink", reflect.TypeOf((*MockRawFileSystemServer)(nil).Unlink), arg0, arg1)
}

// Write mocks base method.
func (m *MockRawFileSystemServer) Write(arg0 context.Context, arg1 *pb.WriteRequest) (*pb.WriteResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Write", arg0, arg1)
	ret0, _ := ret[0].(*pb.WriteResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Write indicates an expected call of Write.
func (mr *MockRawFileSystemServerMockRecorder) Write(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Write", reflect.TypeOf((*MockRawFileSystemServer)(nil).Write), arg0, arg1)
}

// mustEmbedUnimplementedRawFileSystemServer mocks base method.
func (m *MockRawFileSystemServer) mustEmbedUnimplementedRawFileSystemServer() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "mustEmbedUnimplementedRawFileSystemServer")
}

// mustEmbedUnimplementedRawFileSystemServer indicates an expected call of mustEmbedUnimplementedRawFileSystemServer.
func (mr *MockRawFileSystemServerMockRecorder) mustEmbedUnimplementedRawFileSystemServer() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "mustEmbedUnimplementedRawFileSystemServer", reflect.TypeOf((*MockRawFileSystemServer)(nil).mustEmbedUnimplementedRawFileSystemServer))
}

// MockUnsafeRawFileSystemServer is a mock of UnsafeRawFileSystemServer interface.
type MockUnsafeRawFileSystemServer struct {
	ctrl     *gomock.Controller
	recorder *MockUnsafeRawFileSystemServerMockRecorder
}

// MockUnsafeRawFileSystemServerMockRecorder is the mock recorder for MockUnsafeRawFileSystemServer.
type MockUnsafeRawFileSystemServerMockRecorder struct {
	mock *MockUnsafeRawFileSystemServer
}

// NewMockUnsafeRawFileSystemServer creates a new mock instance.
func NewMockUnsafeRawFileSystemServer(ctrl *gomock.Controller) *MockUnsafeRawFileSystemServer {
	mock := &MockUnsafeRawFileSystemServer{ctrl: ctrl}
	mock.recorder = &MockUnsafeRawFileSystemServerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockUnsafeRawFileSystemServer) EXPECT() *MockUnsafeRawFileSystemServerMockRecorder {
	return m.recorder
}

// mustEmbedUnimplementedRawFileSystemServer mocks base method.
func (m *MockUnsafeRawFileSystemServer) mustEmbedUnimplementedRawFileSystemServer() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "mustEmbedUnimplementedRawFileSystemServer")
}

// mustEmbedUnimplementedRawFileSystemServer indicates an expected call of mustEmbedUnimplementedRawFileSystemServer.
func (mr *MockUnsafeRawFileSystemServerMockRecorder) mustEmbedUnimplementedRawFileSystemServer() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "mustEmbedUnimplementedRawFileSystemServer", reflect.TypeOf((*MockUnsafeRawFileSystemServer)(nil).mustEmbedUnimplementedRawFileSystemServer))
}

// MockRawFileSystem_ReadServer is a mock of RawFileSystem_ReadServer interface.
type MockRawFileSystem_ReadServer struct {
	ctrl     *gomock.Controller
	recorder *MockRawFileSystem_ReadServerMockRecorder
}

// MockRawFileSystem_ReadServerMockRecorder is the mock recorder for MockRawFileSystem_ReadServer.
type MockRawFileSystem_ReadServerMockRecorder struct {
	mock *MockRawFileSystem_ReadServer
}

// NewMockRawFileSystem_ReadServer creates a new mock instance.
func NewMockRawFileSystem_ReadServer(ctrl *gomock.Controller) *MockRawFileSystem_ReadServer {
	mock := &MockRawFileSystem_ReadServer{ctrl: ctrl}
	mock.recorder = &MockRawFileSystem_ReadServerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockRawFileSystem_ReadServer) EXPECT() *MockRawFileSystem_ReadServerMockRecorder {
	return m.recorder
}

// Context mocks base method.
func (m *MockRawFileSystem_ReadServer) Context() context.Context {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Context")
	ret0, _ := ret[0].(context.Context)
	return ret0
}

// Context indicates an expected call of Context.
func (mr *MockRawFileSystem_ReadServerMockRecorder) Context() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Context", reflect.TypeOf((*MockRawFileSystem_ReadServer)(nil).Context))
}

// RecvMsg mocks base method.
func (m_2 *MockRawFileSystem_ReadServer) RecvMsg(m interface{}) error {
	m_2.ctrl.T.Helper()
	ret := m_2.ctrl.Call(m_2, "RecvMsg", m)
	ret0, _ := ret[0].(error)
	return ret0
}

// RecvMsg indicates an expected call of RecvMsg.
func (mr *MockRawFileSystem_ReadServerMockRecorder) RecvMsg(m interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RecvMsg", reflect.TypeOf((*MockRawFileSystem_ReadServer)(nil).RecvMsg), m)
}

// Send mocks base method.
func (m *MockRawFileSystem_ReadServer) Send(arg0 *pb.ReadResponse) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Send", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// Send indicates an expected call of Send.
func (mr *MockRawFileSystem_ReadServerMockRecorder) Send(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Send", reflect.TypeOf((*MockRawFileSystem_ReadServer)(nil).Send), arg0)
}

// SendHeader mocks base method.
func (m *MockRawFileSystem_ReadServer) SendHeader(arg0 metadata.MD) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SendHeader", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// SendHeader indicates an expected call of SendHeader.
func (mr *MockRawFileSystem_ReadServerMockRecorder) SendHeader(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendHeader", reflect.TypeOf((*MockRawFileSystem_ReadServer)(nil).SendHeader), arg0)
}

// SendMsg mocks base method.
func (m_2 *MockRawFileSystem_ReadServer) SendMsg(m interface{}) error {
	m_2.ctrl.T.Helper()
	ret := m_2.ctrl.Call(m_2, "SendMsg", m)
	ret0, _ := ret[0].(error)
	return ret0
}

// SendMsg indicates an expected call of SendMsg.
func (mr *MockRawFileSystem_ReadServerMockRecorder) SendMsg(m interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendMsg", reflect.TypeOf((*MockRawFileSystem_ReadServer)(nil).SendMsg), m)
}

// SetHeader mocks base method.
func (m *MockRawFileSystem_ReadServer) SetHeader(arg0 metadata.MD) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetHeader", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// SetHeader indicates an expected call of SetHeader.
func (mr *MockRawFileSystem_ReadServerMockRecorder) SetHeader(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetHeader", reflect.TypeOf((*MockRawFileSystem_ReadServer)(nil).SetHeader), arg0)
}

// SetTrailer mocks base method.
func (m *MockRawFileSystem_ReadServer) SetTrailer(arg0 metadata.MD) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SetTrailer", arg0)
}

// SetTrailer indicates an expected call of SetTrailer.
func (mr *MockRawFileSystem_ReadServerMockRecorder) SetTrailer(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetTrailer", reflect.TypeOf((*MockRawFileSystem_ReadServer)(nil).SetTrailer), arg0)
}

// MockRawFileSystem_ReadDirServer is a mock of RawFileSystem_ReadDirServer interface.
type MockRawFileSystem_ReadDirServer struct {
	ctrl     *gomock.Controller
	recorder *MockRawFileSystem_ReadDirServerMockRecorder
}

// MockRawFileSystem_ReadDirServerMockRecorder is the mock recorder for MockRawFileSystem_ReadDirServer.
type MockRawFileSystem_ReadDirServerMockRecorder struct {
	mock *MockRawFileSystem_ReadDirServer
}

// NewMockRawFileSystem_ReadDirServer creates a new mock instance.
func NewMockRawFileSystem_ReadDirServer(ctrl *gomock.Controller) *MockRawFileSystem_ReadDirServer {
	mock := &MockRawFileSystem_ReadDirServer{ctrl: ctrl}
	mock.recorder = &MockRawFileSystem_ReadDirServerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockRawFileSystem_ReadDirServer) EXPECT() *MockRawFileSystem_ReadDirServerMockRecorder {
	return m.recorder
}

// Context mocks base method.
func (m *MockRawFileSystem_ReadDirServer) Context() context.Context {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Context")
	ret0, _ := ret[0].(context.Context)
	return ret0
}

// Context indicates an expected call of Context.
func (mr *MockRawFileSystem_ReadDirServerMockRecorder) Context() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Context", reflect.TypeOf((*MockRawFileSystem_ReadDirServer)(nil).Context))
}

// RecvMsg mocks base method.
func (m_2 *MockRawFileSystem_ReadDirServer) RecvMsg(m interface{}) error {
	m_2.ctrl.T.Helper()
	ret := m_2.ctrl.Call(m_2, "RecvMsg", m)
	ret0, _ := ret[0].(error)
	return ret0
}

// RecvMsg indicates an expected call of RecvMsg.
func (mr *MockRawFileSystem_ReadDirServerMockRecorder) RecvMsg(m interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RecvMsg", reflect.TypeOf((*MockRawFileSystem_ReadDirServer)(nil).RecvMsg), m)
}

// Send mocks base method.
func (m *MockRawFileSystem_ReadDirServer) Send(arg0 *pb.ReadDirResponse) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Send", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// Send indicates an expected call of Send.
func (mr *MockRawFileSystem_ReadDirServerMockRecorder) Send(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Send", reflect.TypeOf((*MockRawFileSystem_ReadDirServer)(nil).Send), arg0)
}

// SendHeader mocks base method.
func (m *MockRawFileSystem_ReadDirServer) SendHeader(arg0 metadata.MD) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SendHeader", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// SendHeader indicates an expected call of SendHeader.
func (mr *MockRawFileSystem_ReadDirServerMockRecorder) SendHeader(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendHeader", reflect.TypeOf((*MockRawFileSystem_ReadDirServer)(nil).SendHeader), arg0)
}

// SendMsg mocks base method.
func (m_2 *MockRawFileSystem_ReadDirServer) SendMsg(m interface{}) error {
	m_2.ctrl.T.Helper()
	ret := m_2.ctrl.Call(m_2, "SendMsg", m)
	ret0, _ := ret[0].(error)
	return ret0
}

// SendMsg indicates an expected call of SendMsg.
func (mr *MockRawFileSystem_ReadDirServerMockRecorder) SendMsg(m interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendMsg", reflect.TypeOf((*MockRawFileSystem_ReadDirServer)(nil).SendMsg), m)
}

// SetHeader mocks base method.
func (m *MockRawFileSystem_ReadDirServer) SetHeader(arg0 metadata.MD) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetHeader", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// SetHeader indicates an expected call of SetHeader.
func (mr *MockRawFileSystem_ReadDirServerMockRecorder) SetHeader(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetHeader", reflect.TypeOf((*MockRawFileSystem_ReadDirServer)(nil).SetHeader), arg0)
}

// SetTrailer mocks base method.
func (m *MockRawFileSystem_ReadDirServer) SetTrailer(arg0 metadata.MD) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SetTrailer", arg0)
}

// SetTrailer indicates an expected call of SetTrailer.
func (mr *MockRawFileSystem_ReadDirServerMockRecorder) SetTrailer(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetTrailer", reflect.TypeOf((*MockRawFileSystem_ReadDirServer)(nil).SetTrailer), arg0)
}

// MockRawFileSystem_ReadDirPlusServer is a mock of RawFileSystem_ReadDirPlusServer interface.
type MockRawFileSystem_ReadDirPlusServer struct {
	ctrl     *gomock.Controller
	recorder *MockRawFileSystem_ReadDirPlusServerMockRecorder
}

// MockRawFileSystem_ReadDirPlusServerMockRecorder is the mock recorder for MockRawFileSystem_ReadDirPlusServer.
type MockRawFileSystem_ReadDirPlusServerMockRecorder struct {
	mock *MockRawFileSystem_ReadDirPlusServer
}

// NewMockRawFileSystem_ReadDirPlusServer creates a new mock instance.
func NewMockRawFileSystem_ReadDirPlusServer(ctrl *gomock.Controller) *MockRawFileSystem_ReadDirPlusServer {
	mock := &MockRawFileSystem_ReadDirPlusServer{ctrl: ctrl}
	mock.recorder = &MockRawFileSystem_ReadDirPlusServerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockRawFileSystem_ReadDirPlusServer) EXPECT() *MockRawFileSystem_ReadDirPlusServerMockRecorder {
	return m.recorder
}

// Context mocks base method.
func (m *MockRawFileSystem_ReadDirPlusServer) Context() context.Context {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Context")
	ret0, _ := ret[0].(context.Context)
	return ret0
}

// Context indicates an expected call of Context.
func (mr *MockRawFileSystem_ReadDirPlusServerMockRecorder) Context() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Context", reflect.TypeOf((*MockRawFileSystem_ReadDirPlusServer)(nil).Context))
}

// RecvMsg mocks base method.
func (m_2 *MockRawFileSystem_ReadDirPlusServer) RecvMsg(m interface{}) error {
	m_2.ctrl.T.Helper()
	ret := m_2.ctrl.Call(m_2, "RecvMsg", m)
	ret0, _ := ret[0].(error)
	return ret0
}

// RecvMsg indicates an expected call of RecvMsg.
func (mr *MockRawFileSystem_ReadDirPlusServerMockRecorder) RecvMsg(m interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RecvMsg", reflect.TypeOf((*MockRawFileSystem_ReadDirPlusServer)(nil).RecvMsg), m)
}

// Send mocks base method.
func (m *MockRawFileSystem_ReadDirPlusServer) Send(arg0 *pb.ReadDirResponse) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Send", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// Send indicates an expected call of Send.
func (mr *MockRawFileSystem_ReadDirPlusServerMockRecorder) Send(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Send", reflect.TypeOf((*MockRawFileSystem_ReadDirPlusServer)(nil).Send), arg0)
}

// SendHeader mocks base method.
func (m *MockRawFileSystem_ReadDirPlusServer) SendHeader(arg0 metadata.MD) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SendHeader", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// SendHeader indicates an expected call of SendHeader.
func (mr *MockRawFileSystem_ReadDirPlusServerMockRecorder) SendHeader(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendHeader", reflect.TypeOf((*MockRawFileSystem_ReadDirPlusServer)(nil).SendHeader), arg0)
}

// SendMsg mocks base method.
func (m_2 *MockRawFileSystem_ReadDirPlusServer) SendMsg(m interface{}) error {
	m_2.ctrl.T.Helper()
	ret := m_2.ctrl.Call(m_2, "SendMsg", m)
	ret0, _ := ret[0].(error)
	return ret0
}

// SendMsg indicates an expected call of SendMsg.
func (mr *MockRawFileSystem_ReadDirPlusServerMockRecorder) SendMsg(m interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendMsg", reflect.TypeOf((*MockRawFileSystem_ReadDirPlusServer)(nil).SendMsg), m)
}

// SetHeader mocks base method.
func (m *MockRawFileSystem_ReadDirPlusServer) SetHeader(arg0 metadata.MD) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetHeader", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// SetHeader indicates an expected call of SetHeader.
func (mr *MockRawFileSystem_ReadDirPlusServerMockRecorder) SetHeader(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetHeader", reflect.TypeOf((*MockRawFileSystem_ReadDirPlusServer)(nil).SetHeader), arg0)
}

// SetTrailer mocks base method.
func (m *MockRawFileSystem_ReadDirPlusServer) SetTrailer(arg0 metadata.MD) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SetTrailer", arg0)
}

// SetTrailer indicates an expected call of SetTrailer.
func (mr *MockRawFileSystem_ReadDirPlusServerMockRecorder) SetTrailer(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetTrailer", reflect.TypeOf((*MockRawFileSystem_ReadDirPlusServer)(nil).SetTrailer), arg0)
}
